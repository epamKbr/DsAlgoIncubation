Problem 1
int fun1(int n) {
    int m = 0;
    for (int i = 0; i < n; i++) {
        m += 1;
    }
    return m;
}
Ans: O(n), since loop is iterated n times. m is just a variable being incremented.

Problem 2 
int fun2(int n) {
    int i, j, m = 0;
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            m += 1;
        }
    }
    return m;
}

Ans: O(n^2)

Problem 3 
int fun3(int n) {
    int i, j, m = 0;
    for (i = 0; i < n; i++) {
        for (j = 0; j < i; j++) {
            m += 1;
        }
    }
    return m;
}

Ans: O(n^2), Since max value inner loop j can have is n, hence n*n is TC

Problem 4 
int fun4(int n) {
    int i, m = 0;
    i = 1;
    while (i < n) {
        m += 1;
        i = i * 2;
    }
    return m;
}

Ans: O(log n) , for every iteration i value is being multiplied by a constant 2. 

Problem 5 
int fun5(int n) {
    int i, m = 0;
    i = n;
    while (i > 0) {
        m += 1;
        i = i / 2;
    }
    return m;
}

Ans: O(log n) , for every iteration i value is being reduced by a constant 2. 

Problem 6
int fun6(int n) {
    int i, j, k, m = 0;
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            for (k = 0; k < n; k++) m += 1;
        }
    }
    return m;
}  

Ans: O(n^3) , 3 loops and every iterable is checked if its less than n.

Problem 7 
   int fun7(int n) {
       int i, j, k, m = 0;
       for (i = 0; i < n; i++) {
           for (j = 0; j < n; j++) {
               m += 1;
           }
       }
       for (i = 0; i < n; i++) {
           for (k = 0; k < n; k++) {
               m += 1;
           }
       }
       return m;
   }  
   
Ans: O(n^2)+O(n^2) = O(n^2) 

Problem 8
int fun8(int n) {
    int i, j, m = 0;
    for (i = 0; i < n; i++) {
        for (j = 0; j < Math.sqrt(n); j++) m += 1;
    }
    return m;
}

Ans: O(n*sqrt(n)) = O(n)

Problem 9
int fun9(int n) {
    int i, j, m = 0;
    for (i = n; i > 0; i /= 2) {
        for (j = 0; j < i; j++) {
            m += 1;
        }
    }
    return m;
}

Ans:O(n*log n)

Problem 10
int fun10(int n) {
    int i, j, m = 0;
    for (i = 0; i < n; i++) {
        for (j = i; j > 0; j--) {
            m += 1;
        }
    }
    return m;
}

Ans:O(n^2)

Problem 11
int fun11(int n) {
    int i, j, k, m = 0;
    for (i = 0; i < n; i++) {
        for (j = i; j < n; j++) {
            for (k = j + 1; k < n; k++) {
                m += 1;
            }
        }
    }
    return m;
}

Ans: O(n^3)

Problem 12
int fun12(int n) {
    int i, j = 0, m = 0;
    for (i = 0; i < n; i++) {
        for (; j < n; j++) {
            m += 1;
        }
    }
    return m;
}

Ans: O(n), Since j is global variable and not initialised inside second for loop, 
second loop runs only n times as j<n condition wont satisfy once the second loop is done running once.
